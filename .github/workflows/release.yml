# .github/workflows/release.yml
name: Release

# Trigger on pushes to main and version tags
on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Matches v1.0.0, v1.2.3-beta, etc.
  
  # Keep manual trigger as backup option
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      target_version:
        description: 'Specific version (optional, overrides bump type)'
        required: false
        type: string

jobs:
  # Single job that handles all release scenarios
  release:
    # Skip if this is a workflow_dispatch (manual releases handled separately)
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history to check for tags
    
    - name: Check for version tag on current commit
      id: check_version
      run: |
        # Check if current commit has a version tag
        TAGS=$(git tag --points-at HEAD)
        VERSION_TAG=""
        
        for tag in $TAGS; do
          if [[ "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            VERSION_TAG="$tag"
            break
          fi
        done
        
        if [ -n "$VERSION_TAG" ]; then
          echo "has_version_tag=true" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          VERSION=${VERSION_TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Found version tag: $VERSION_TAG"
        else
          echo "has_version_tag=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è No version tag found on current commit - skipping release"
        fi
    
    - name: Skip if no version tag
      if: steps.check_version.outputs.has_version_tag != 'true'
      run: |
        echo "This commit doesn't have a version tag - no release will be created"
        echo "To create a release:"
        echo "1. Run: python scripts/bump_version.py patch"
        echo "2. Push the changes and tags"
        exit 0
    
    - name: Set up Python
      if: steps.check_version.outputs.has_version_tag == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      if: steps.check_version.outputs.has_version_tag == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Verify version matches tag
      if: steps.check_version.outputs.has_version_tag == 'true'
      run: |
        # Check that the version in _version_.py matches the tag
        PACKAGE_VERSION=$(python -c "
        import sys, os
        sys.path.insert(0, os.getcwd())
        version_file = 'lucidium/_version_.py'
        version_vars = {}
        with open(version_file) as f:
            exec(f.read(), version_vars)
        print(version_vars['__version__'])
        ")
        TAG_VERSION="${{ steps.check_version.outputs.version }}"
        
        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"
        
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "‚ùå Version mismatch!"
          echo "Make sure to update _version_.py before tagging"
          exit 1
        fi
        
        echo "‚úÖ Version verified: $PACKAGE_VERSION"
    
    - name: Build package
      if: steps.check_version.outputs.has_version_tag == 'true'
      run: python -m build
    
    - name: Generate changelog
      if: steps.check_version.outputs.has_version_tag == 'true'
      id: changelog
      run: |
        # Get commits since last tag (for changelog)
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREV_TAG" ]; then
          echo "## What's Changed" > changelog.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD >> changelog.md
        else
          echo "## What's Changed" > changelog.md
          echo "- Initial release" >> changelog.md
        fi
        
        # Save changelog to file for later use
        echo "Changelog generated:"
        cat changelog.md
    
    - name: Create GitHub Release
      if: steps.check_version.outputs.has_version_tag == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.check_version.outputs.version_tag }}
        release_name: Release ${{ steps.check_version.outputs.version_tag }}
        draft: false
        prerelease: ${{ contains(steps.check_version.outputs.version, '-') }}
        body: |
          ## Lucidium ${{ steps.check_version.outputs.version_tag }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### Installation
          ```bash
          pip install lucidium==${{ steps.check_version.outputs.version }}
          ```
          
          ### PyPI Package
          üì¶ [View on PyPI](https://pypi.org/project/lucidium/${{ steps.check_version.outputs.version }}/)
    
    - name: Publish to PyPI
      if: steps.check_version.outputs.has_version_tag == 'true' && success()
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine check dist/*
        twine upload dist/*
        echo "‚úÖ Published to PyPI: https://pypi.org/project/lucidium/${{ steps.check_version.outputs.version }}/"

  # Job for manual version bumping
  manual-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Bump version
      id: bump
      run: |
        if [ -n "${{ github.event.inputs.target_version }}" ]; then
          python scripts/bump_version.py --to "${{ github.event.inputs.target_version }}"
          echo "new_version=${{ github.event.inputs.target_version }}" >> $GITHUB_OUTPUT
        else
          # Get current version first
          CURRENT_VERSION=$(python -c "
          version_file = 'lucidium/_version_.py'
          version_vars = {}
          with open(version_file) as f:
              exec(f.read(), version_vars)
          print(version_vars['__version__'])
          ")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version and capture output
          python scripts/bump_version.py ${{ github.event.inputs.version_bump }}
          
          # Get new version
          NEW_VERSION=$(python -c "
          version_file = 'lucidium/_version_.py'
          version_vars = {}
          with open(version_file) as f:
              exec(f.read(), version_vars)
          print(version_vars['__version__'])
          ")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Push changes
      run: |
        git push origin main
        git push --tags
        echo "‚úÖ Pushed version bump and tags - release workflow will trigger automatically"
    
    - name: Wait for release workflow
      run: |
        echo "‚è≥ The release workflow will now be triggered by the tag push..."
        echo "Check the Actions tab to see the release build progress."