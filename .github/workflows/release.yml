# .github/workflows/release.yml
name: Release

# Trigger on version tags, manual dispatch, and merges to main
on:
  push:
    tags:
      - 'v*'  # Matches v1.0.0, v1.2.3-beta, etc.
    branches:
      - main  # Also trigger on pushes to main
  
  # Keep manual trigger as backup option
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      target_version:
        description: 'Specific version (optional, overrides bump type)'
        required: false
        type: string

jobs:
  # Job for automatic tag-based releases
  release-from-tag:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag
      id: extract_version
      run: |
        # Remove 'v' prefix from tag to get version
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Creating release for version: $VERSION"
    
    - name: Verify version matches tag
      run: |
        # Check that the version in _version_.py matches the tag
        PACKAGE_VERSION=$(python -c "
        import sys, os
        # Add the project root to Python path
        sys.path.insert(0, os.getcwd())
        # Read the version file directly
        version_file = 'lucidium/_version_.py'
        version_vars = {}
        with open(version_file) as f:
            exec(f.read(), version_vars)
        print(version_vars['__version__'])
        ")
        TAG_VERSION="${{ steps.extract_version.outputs.version }}"
        
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch!"
          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"
          echo "Make sure to update _version_.py before tagging"
          exit 1
        fi
        
        echo "✅ Version verified: $PACKAGE_VERSION"
    
    - name: Build package
      run: python -m build
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(steps.extract_version.outputs.version, '-') }}
        body: |
          ## Changes in ${{ github.ref_name }}
          
          Automated release created from tag push.
          
          ### Installation
          ```bash
          pip install lucidium==${{ steps.extract_version.outputs.version }}
          ```
          
          ### What's Changed
          <!-- Add your changelog here or use a changelog generator -->
    
    - name: Publish to PyPI
      if: success()
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine check dist/*
        twine upload dist/*

  # Job for merge-based releases (only if commit has version tag)
  release-from-merge:
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if commit is tagged
      id: check_tag
      run: |
        # Check if the current commit has a version tag
        TAG=$(git describe --exact-match --tags HEAD 2>/dev/null || echo "")
        if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
          echo "has_version_tag=true" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Found version tag: $TAG"
        else
          echo "has_version_tag=false" >> $GITHUB_OUTPUT
          echo "No version tag found for this commit"
        fi
    
    - name: Skip if no version tag
      if: steps.check_tag.outputs.has_version_tag != 'true'
      run: |
        echo "This merge doesn't have a version tag - skipping release"
        echo "To create a release, tag the commit with a version (e.g., v1.2.3)"
        exit 0
    
    - name: Set up Python
      if: steps.check_tag.outputs.has_version_tag == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      if: steps.check_tag.outputs.has_version_tag == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag
      if: steps.check_tag.outputs.has_version_tag == 'true'
      id: extract_version
      run: |
        TAG="${{ steps.check_tag.outputs.tag }}"
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Creating release for version: $VERSION"
    
    - name: Verify version matches tag
      if: steps.check_tag.outputs.has_version_tag == 'true'
      run: |
        PACKAGE_VERSION=$(python -c "
        import sys, os
        sys.path.insert(0, os.getcwd())
        version_file = 'lucidium/_version_.py'
        version_vars = {}
        with open(version_file) as f:
            exec(f.read(), version_vars)
        print(version_vars['__version__'])
        ")
        TAG_VERSION="${{ steps.extract_version.outputs.version }}"
        
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch!"
          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"
          exit 1
        fi
        
        echo "✅ Version verified: $PACKAGE_VERSION"
    
    - name: Build package
      if: steps.check_tag.outputs.has_version_tag == 'true'
      run: python -m build
    
    - name: Create GitHub Release
      if: steps.check_tag.outputs.has_version_tag == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.check_tag.outputs.tag }}
        release_name: Release ${{ steps.check_tag.outputs.tag }}
        draft: false
        prerelease: ${{ contains(steps.extract_version.outputs.version, '-') }}
        body: |
          ## Changes in ${{ steps.check_tag.outputs.tag }}
          
          Automated release created from merge to main.
          
          ### Installation
          ```bash
          pip install lucidium==${{ steps.extract_version.outputs.version }}
          ```
          
          ### What's Changed
          <!-- Add your changelog here or use a changelog generator -->
    
    - name: Publish to PyPI
      if: steps.check_tag.outputs.has_version_tag == 'true' && success()
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine check dist/*
        twine upload dist/*

  # Job for manual version bumping
  manual-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Bump version
      id: bump
      run: |
        if [ -n "${{ github.event.inputs.target_version }}" ]; then
          python scripts/bump_version.py --to "${{ github.event.inputs.target_version }}"
          echo "new_version=${{ github.event.inputs.target_version }}" >> $GITHUB_OUTPUT
        else
          # Get current version first
          CURRENT_VERSION=$(python -c "
          version_file = 'lucidium/_version_.py'
          version_vars = {}
          with open(version_file) as f:
              exec(f.read(), version_vars)
          print(version_vars['__version__'])
          ")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version and capture output
          python scripts/bump_version.py ${{ github.event.inputs.version_bump }}
          
          # Get new version
          NEW_VERSION=$(python -c "
          version_file = 'lucidium/_version_.py'
          version_vars = {}
          with open(version_file) as f:
              exec(f.read(), version_vars)
          print(version_vars['__version__'])
          ")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Push changes
      run: |
        git push origin main
        git push --tags
    
    - name: Build package
      run: python -m build
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump.outputs.new_version }}
        release_name: Release v${{ steps.bump.outputs.new_version }}
        draft: false
        prerelease: false
        body: |
          ## Changes in v${{ steps.bump.outputs.new_version }}
          
          Manual release from GitHub Actions.
          
          ### Installation
          ```bash
          pip install lucidium==${{ steps.bump.outputs.new_version }}
          ```
    
    - name: Publish to PyPI
      if: success()
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine check dist/*
        twine upload dist/*